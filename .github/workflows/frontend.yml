name: Node.js CI

on:
  push:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v1
      with:
          node-version: '14'
    - run: |
        npm install && npm run lint 

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    # - uses: actions/setup-node@v1
    #   with:
    #       node-version: '14'
    # - run: npm install && npm run build
    # - name: Download artifacts
    #   uses: actions/download-artifact@v3
    #   with:
    #     path: build
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: testing-devops
        IMAGE_TAG: latest
      run: |  
        docker build -t $ECR_REPOSITORY .
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG 
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
  deploy:
    runs-on: ubuntu-latest
    needs: build

    if: github.event_name == 'push'
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Restart K8 Deployment
      id: kubectl
      uses: ianbelcher/eks-kubectl-action@master
      with:
        cluster_name: ${{ secrets.CLUSTER_NAME }}
        args: rollout restart deployment/${{ secrets.DEPLOYMENT_NAME }} -n ${{ secrets.NAMESPACE }}
